{"version":3,"mappings":"6xBAwDA,eAAeA,EAAcC,EAAgBC,EAAUC,EAAY,CAEjE,KAAM,CACJC,YACAC,YACAC,6BACAC,kBACAC,yBACF,EAAI,MAAMC,EAAA,WAAO,8BAAgB,OAAAC,KAAA,2FAE3BC,EAAYL,EAA2BL,CAAc,EAK3D,MAAMU,EAAUC,UAAU,CACxBC,KAAMX,EACNY,QAAS,CAACX,CAAU,CACtB,CAAC,EAED,MAAMY,EAAY,IAAIV,EACtBU,SAAUC,SAASL,CAAS,EAErB,MAAMP,EAAU,CACrBW,YACAE,KAAMhB,CACR,CAAC,CACH,CAEA,MAAMiB,EAAWC,EAAI,EAAE,EACjBC,EAAUD,EAAIE,aAAaC,QAAQ,WAAW,GAAK,EAAE,EACrDC,EAAaJ,EAAI,EAAE,EACnBK,EAAWL,EAAIM,KAAKC,MAAML,aAAaC,QAAQ,oBAAoB,GAAK,OAAO,CAAC,EAChFK,EAAuBR,EAAI,YAAY,EACvCS,EAAgB,CACpB,CACEC,MAAO,MACPC,MAAO,KACT,EACA,CACED,MAAO,QACPC,MAAO,OACT,EACA,CACED,MAAO,cACPC,MAAO,YACT,EACA,CACED,MAAO,aACPC,MAAO,YACT,CAAC,EAEH,eAAeC,GAAM,CACnB,GAAI,CACF,MAAMC,EAAMC,EAAMP,MAAMN,EAAQU,KAAK,EAGrC,GAFAZ,EAASY,MAAQL,KAAKS,UAAUF,EAAK,KAAM,CAAC,EAExCL,EAAqBG,OAAS,MAAO,CACvC,KAAM,CAAEK,QAASC,CAAS,EAAI,MAAM3B,EAAA,WAAO,wBAAoB,uBACzD4B,EAAMD,EAASJ,CAAG,EACxBT,EAAWO,MAAQO,CACrB,SACSV,EAAqBG,OAAS,QAAS,CAC9C,KAAM,CAAEK,QAASG,CAAW,EAAI,MAAM7B,EAAA,WAAO,0BAAsB,uBAC7D8B,EAAQD,EAAWN,CAAG,EAC5BT,EAAWO,MAAQS,CACrB,SACSZ,EAAqBG,OAAS,aAAc,CACnD,KAAM,CAAEU,MAAOC,GAAiB,MAAMzC,EAAc,cAAe,SAAUkB,EAASY,KAAK,EAC3FP,EAAWO,MAAQW,EAAaC,KAAK;AAAA,CAAI,CAC3C,SACSf,EAAqBG,OAAS,aAAc,CACnD,KAAM,CAAEU,MAAOC,GAAiB,MAAMzC,EAAc,aAAc,SAAUkB,EAASY,KAAK,EAC1FP,EAAWO,MAAQW,EAAaC,KAAK;AAAA,CAAI,CAC3C,CACArB,aAAasB,QAAQ,YAAazB,EAASY,KAAK,CACjD,OACMc,EAAG,CACRrB,EAAWO,MAAQc,EAAEC,UAEvB,CACF,CAEAC,SAAU,IAAI,CACRtB,EAASM,OAAOC,GACtB,CAAC,EACDgB,EAAM,CAACvB,CAAQ,EAAG,SAAY,CAC5BH,aAAasB,QAAQ,qBAAsBnB,EAASM,MAAMe,SAAQ,CAAE,CACtE,CAAC,EACDE,EAAM,CAAC3B,EAASI,EAAUG,CAAoB,EAAG,MAAOqB,EAAWC,IAAc,CAC3EzB,EAASM,OAAOC,GACtB,CAAC","names":["quicktypeJSON","targetLanguage","typeName","jsonString","quicktype","InputData","jsonInputForTargetLanguage","JSONSchemaInput","FetchingJSONSchemaStore","__vitePreload","n","jsonInput","addSource","name","samples","inputData","addInput","lang","json_str","ref","run_str","localStorage","getItem","result_str","auto_run","JSON","parse","query_current_select","query_options","label","value","run","obj","JSON5","stringify","default","json2csv","csv","json2jsdoc","jsdoc","lines","pythonPerson","join","setItem","e","toString","onMounted","watch","old_value","new_value"],"sources":["../../src/components/JsonConvertor.vue"],"sourcesContent":["<template>\n  <n-flex vertical style=\"width: 100%; overflow: scroll; gap: 0\">\n    <n-flex style=\"\n        padding: 4px 6px;\n        flex-grow: 1;\n        border-bottom: 1px solid var(--n-border-color);\n      \">\n      <n-grid x-gap=\"8\" :cols=\"2\">\n        <n-gi>\n          <n-flex justify=\"start\" style=\"column-gap: 2px; align-items: center\">\n            <n-button @click=\"run()\">Run <n-icon size=\"20\" style=\"margin-left: 5px\">\n                <play />\n              </n-icon></n-button>\n            <n-checkbox size=\"small\" label=\"auto\" v-model:checked=\"auto_run\" />\n          </n-flex>\n        </n-gi>\n        <n-gi style=\"display: block\">\n          <n-select style=\"width: 150px\" v-model:value=\"query_current_select\" :options=\"query_options\"></n-select>\n        </n-gi>\n      </n-grid>\n    </n-flex>\n\n    <splitpanes style=\"height: calc(100% - var(--header-height))\">\n      <pane :size=\"50\">\n        <n-input class=\"code_text\" style=\"height: 100%; overflow: scroll\" v-model:value=\"run_str\" type=\"textarea\"\n          placeholder='JSON Text { \"a\" : \"123\" }' />\n      </pane>\n\n      <pane :size=\"50\" style=\"height: 100%; align-items: flex-start\">\n        <n-flex vertical style=\"height: 100%; width: 100%; overflow: scroll\">\n          <n-input class=\"code_text\" style=\"height: 100%; overflow: scroll\" v-model:value=\"result_str\"\n            type=\"textarea\" />\n        </n-flex>\n      </pane>\n    </splitpanes>\n  </n-flex>\n</template>\n<script setup lang=\"tsx\">\nimport { Splitpanes, Pane } from \"splitpanes\";\nimport \"splitpanes/dist/splitpanes.css\";\nimport {\n  NButton,\n  NFlex,\n  NInput,\n  NIcon,\n  NCheckbox,\n  NSelect,\n  NGrid,\n  NGi,\n} from \"naive-ui\";\nimport { Play } from \"@vicons/ionicons5\";\nimport { onMounted, ref, watch } from \"vue\";\nimport JSON5 from \"json5\";\n\n\n\nasync function quicktypeJSON(targetLanguage, typeName, jsonString) {\n\n  const {\n    quicktype,\n    InputData,\n    jsonInputForTargetLanguage,\n    JSONSchemaInput,\n    FetchingJSONSchemaStore\n  } = await import(\"quicktype-core\");\n\n  const jsonInput = jsonInputForTargetLanguage(targetLanguage);\n\n  // We could add multiple samples for the same desired\n  // type, or many sources for other types. Here we're\n  // just making one type from one piece of sample JSON.\n  await jsonInput.addSource({\n    name: typeName,\n    samples: [jsonString]\n  });\n\n  const inputData = new InputData();\n  inputData.addInput(jsonInput);\n\n  return await quicktype({\n    inputData,\n    lang: targetLanguage\n  });\n}\n\nconst json_str = ref(\"\");\nconst run_str = ref(localStorage.getItem(\"input_str\") || \"\");\nconst result_str = ref(\"\");\nconst auto_run = ref(JSON.parse(localStorage.getItem(\"jsonConvertor_auto\") || 'false'));\nconst query_current_select = ref(\"JsonSchema\");\nconst query_options = [\n  {\n    label: \"CSV\",\n    value: \"csv\",\n  },\n  {\n    label: \"JsDoc\",\n    value: \"jsdoc\",\n  },\n  {\n    label: \"JSON Schema\",\n    value: \"JsonSchema\",\n  },\n  {\n    label: \"TypeScript\",\n    value: \"typescript\",\n  },\n];\nasync function run() {\n  try {\n    const obj = JSON5.parse(run_str.value);\n    json_str.value = JSON.stringify(obj, null, 2);\n\n    if (query_current_select.value == \"csv\") {\n      const { default: json2csv } = await import(\"../lib/json2csv.js\");\n      const csv = json2csv(obj);\n      result_str.value = csv\n    }\n    else if (query_current_select.value == \"jsdoc\") {\n      const { default: json2jsdoc } = await import(\"../lib/json2jsdoc.js\");\n      const jsdoc = json2jsdoc(obj);\n      result_str.value = jsdoc\n    }\n    else if (query_current_select.value == \"JsonSchema\") {\n      const { lines: pythonPerson } = await quicktypeJSON(\"JSON Schema\", \"Object\", json_str.value);\n      result_str.value = pythonPerson.join('\\n')\n    }\n    else if (query_current_select.value == \"typescript\") {\n      const { lines: pythonPerson } = await quicktypeJSON(\"TypeScript\", \"Object\", json_str.value);\n      result_str.value = pythonPerson.join('\\n')\n    }\n    localStorage.setItem(\"input_str\", json_str.value);\n  }\n  catch (e) {\n    result_str.value = e.toString()\n\n  }\n}\n\nonMounted(()=>{\n  if (auto_run.value) run();\n})\nwatch([auto_run], async () => {\n  localStorage.setItem(\"jsonConvertor_auto\", auto_run.value.toString());\n})\nwatch([run_str, auto_run, query_current_select], async (old_value, new_value) => {\n  if (auto_run.value) run();\n});\n</script>\n<style>\n:root {\n  --header-height: 43px;\n  --n-border-color: rgb(239, 239, 245);\n}\n\n.splitpanes__pane {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: Helvetica, Arial, sans-serif;\n  color: gray;\n  flex-grow: 1;\n}\n\n.splitpanes--vertical>.splitpanes__splitter {\n  width: 5px;\n  background-color: darkgray;\n  flex-shrink: 0;\n}\n\n.json_table {\n  /* font-size: 16px; */\n  overflow-y: scroll;\n  display: block;\n}\n\n.n-table {\n  width: fit-content;\n  margin: auto;\n}\n\n.n-table.n-table--bordered tr:last-child td {\n  border-bottom: 1px solid var(--n-border-color);\n}\n\ntd:first-child {\n  width: 10%;\n}\n\ndiv.fragment {\n  margin: 4px 8px 4px 2px;\n  background-color: #f8f8f8;\n  border: 1px solid #ddd;\n  font-size: 13px;\n  line-height: 19px;\n  overflow: auto;\n  padding: 6px 10px;\n  border-radius: 3px;\n}\n\ndiv.line {\n  font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 13px;\n  font-style: normal;\n  font-variant: normal;\n  font-weight: normal;\n  line-height: 19px;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  text-indent: -53px;\n  padding-left: 53px;\n  padding-bottom: 0px;\n  margin: 0px;\n}\n\n.code_text {\n  font-family: Menlo, Monaco, 'Courier New', monospace\n}\n</style>\n"],"file":"assets/JsonConvertor-qD6uuCtL.js"}