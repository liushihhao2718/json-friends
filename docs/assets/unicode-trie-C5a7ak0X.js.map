{"version":3,"file":"unicode-trie-C5a7ak0X.js","sources":["../../node_modules/unicode-trie/swap.js","../../node_modules/unicode-trie/index.js"],"sourcesContent":["const isBigEndian = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);\n\nconst swap = (b, n, m) => {\n  let i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n};\n\nconst swap32 = array => {\n  const len = array.length;\n  for (let i = 0; i < len; i += 4) {\n    swap(array, i, i + 3);\n    swap(array, i + 1, i + 2);\n  }\n};\n\nconst swap32LE = array => {\n  if (isBigEndian) {\n    swap32(array);\n  }\n};\n\nmodule.exports = {\n  swap32LE: swap32LE\n};\n","const inflate = require('tiny-inflate');\nconst { swap32LE } = require('./swap');\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32LE(0);\n        this.errorValue = data.readUInt32LE(4);\n        uncompressedLength = data.readUInt32LE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n\n      // swap bytes from little-endian\n      swap32LE(data);\n\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;"],"names":["isBigEndian","swap","b","n","m","i","swap32","array","len","swap32LE","swap_1","inflate","require$$0","require$$1","SHIFT_1","SHIFT_2","SHIFT_1_2","OMITTED_BMP_INDEX_1_LENGTH","INDEX_2_BLOCK_LENGTH","INDEX_2_MASK","INDEX_SHIFT","DATA_BLOCK_LENGTH","DATA_MASK","LSCP_INDEX_2_OFFSET","LSCP_INDEX_2_LENGTH","INDEX_2_BMP_LENGTH","UTF8_2B_INDEX_2_OFFSET","UTF8_2B_INDEX_2_LENGTH","INDEX_1_OFFSET","DATA_GRANULARITY","UnicodeTrie","data","isBuffer","uncompressedLength","view","codePoint","index","unicodeTrie"],"mappings":"+CAAA,MAAMA,EAAe,IAAI,WAAW,IAAI,YAAY,CAAC,SAAU,CAAC,EAAE,MAAM,EAAE,CAAC,IAAM,GAE3EC,EAAO,CAACC,EAAGC,EAAGC,IAAM,CACxB,IAAIC,EAAIH,EAAEC,CAAC,EACXD,EAAEC,CAAC,EAAID,EAAEE,CAAC,EACVF,EAAEE,CAAC,EAAIC,CACT,EAEMC,EAASC,GAAS,CACtB,MAAMC,EAAMD,EAAM,OAClB,QAASF,EAAI,EAAGA,EAAIG,EAAKH,GAAK,EAC5BJ,EAAKM,EAAOF,EAAGA,EAAI,CAAC,EACpBJ,EAAKM,EAAOF,EAAI,EAAGA,EAAI,CAAC,CAE5B,EAEMI,EAAWF,GAAS,CACpBP,GACFM,EAAOC,CAAK,CAEhB,EAEA,IAAAG,EAAiB,CACf,SAAUD,CACZ,ECxBA,MAAME,EAAUC,EACV,CAAE,SAAAH,CAAU,EAAGI,EAGfC,EAAU,GAGVC,EAAU,EAIVC,EAAYF,EAAUC,EAItBE,EAA6B,OAAWH,EAGxCI,EAAuB,GAAKF,EAG5BG,EAAeD,EAAuB,EAMtCE,EAAc,EAGdC,EAAoB,GAAKN,EAGzBO,EAAYD,EAAoB,EAMhCE,EAAsB,OAAWR,EACjCS,EAAsB,MAAST,EAG/BU,EAAqBF,EAAsBC,EAI3CE,EAAyBD,EACzBE,EAAyB,GAYzBC,EAAiBF,EAAyBC,EAG1CE,EAAmB,GAAKT,EAE9B,MAAMU,CAAY,CAChB,YAAYC,EAAM,CAChB,MAAMC,EAAY,OAAOD,EAAK,cAAiB,YAAgB,OAAOA,EAAK,OAAU,WAErF,GAAIC,GAAYD,aAAgB,WAAY,CAE1C,IAAIE,EACJ,GAAID,EACF,KAAK,UAAYD,EAAK,aAAa,CAAC,EACpC,KAAK,WAAaA,EAAK,aAAa,CAAC,EACrCE,EAAqBF,EAAK,aAAa,CAAC,EACxCA,EAAOA,EAAK,MAAM,EAAE,MACf,CACL,MAAMG,EAAO,IAAI,SAASH,EAAK,MAAM,EACrC,KAAK,UAAYG,EAAK,UAAU,EAAG,EAAI,EACvC,KAAK,WAAaA,EAAK,UAAU,EAAG,EAAI,EACxCD,EAAqBC,EAAK,UAAU,EAAG,EAAI,EAC3CH,EAAOA,EAAK,SAAS,EAAE,CACxB,CAGDA,EAAOpB,EAAQoB,EAAM,IAAI,WAAWE,CAAkB,CAAC,EACvDF,EAAOpB,EAAQoB,EAAM,IAAI,WAAWE,CAAkB,CAAC,EAGvDxB,EAASsB,CAAI,EAEb,KAAK,KAAO,IAAI,YAAYA,EAAK,MAAM,CAE7C,MAEO,CAAE,KAAM,KAAK,KAAM,UAAW,KAAK,UAAW,WAAY,KAAK,UAAU,EAAKA,EAElF,CAED,IAAII,EAAW,CACb,IAAIC,EACJ,OAAKD,EAAY,GAAOA,EAAY,QAC3B,KAAK,WAGTA,EAAY,OAAaA,EAAY,OAAYA,GAAa,OAIjEC,GAAS,KAAK,KAAKD,GAAapB,CAAO,GAAKK,IAAgBe,EAAYb,GACjE,KAAK,KAAKc,CAAK,GAGpBD,GAAa,OAKfC,GAAS,KAAK,KAAKb,GAAwBY,EAAY,OAAWpB,EAAQ,GAAKK,IAAgBe,EAAYb,GACpG,KAAK,KAAKc,CAAK,GAGpBD,EAAY,KAAK,WAEnBC,EAAQ,KAAK,KAAMR,EAAiBX,GAA+BkB,GAAarB,EAAQ,EACxFsB,EAAQ,KAAK,KAAKA,GAAUD,GAAapB,EAAWI,EAAa,EACjEiB,GAASA,GAAShB,IAAgBe,EAAYb,GACvC,KAAK,KAAKc,CAAK,GAGjB,KAAK,KAAK,KAAK,KAAK,OAASP,CAAgB,CACrD,CACH,CAEA,IAAAQ,EAAiBP","x_google_ignoreList":[0,1]}